/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Application.Uber;
import Application.UberInventory;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class ManageCarRidesJPanel extends javax.swing.JPanel {
    private JPanel rightJPanel;
    private UberInventory uberInventory;    

    /**
     * Creates new form ManageJPanel
     */
//    public ManageCarRidesJPanel() {
//        initComponents();
//    }

    ManageCarRidesJPanel(JPanel rightJPanel, UberInventory uberInventory) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        initComponents();
        this.rightJPanel = rightJPanel;
        this.uberInventory = uberInventory;
//        populateTable(uberInventory, "all");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCarDetailsManage = new javax.swing.JTable();
        lblManageRides = new javax.swing.JLabel();
        btnDeleteCarDetails = new javax.swing.JButton();
        btnViewCarDetails = new javax.swing.JButton();
        lblSearchfield = new javax.swing.JLabel();
        txtInputFieldManage = new javax.swing.JTextField();
        btnSearchByCarBrand = new javax.swing.JButton();
        btnListAvailableCars = new javax.swing.JButton();
        btnSearchByMfgYr = new javax.swing.JButton();
        btnSearchBySerialNo = new javax.swing.JButton();
        btnSearchByModelNo = new javax.swing.JButton();
        btnCarManuList = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnFindFirstAvailCar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        lblSearchByCarSeats = new javax.swing.JLabel();
        txtEnterMaxSeats = new javax.swing.JTextField();
        txtEnterMinSeats = new javax.swing.JTextField();
        lblEnterMaxSeats = new javax.swing.JLabel();
        lblEnterMinSeats = new javax.swing.JLabel();
        btnSearchByCity = new javax.swing.JButton();
        btnSearchbyExpiryMCerti = new javax.swing.JButton();
        btnSeatsMinMax = new javax.swing.JButton();
        btnButtonfunc = new javax.swing.JButton();
        btnImportData = new javax.swing.JButton();
        btnListExpiredCars = new javax.swing.JButton();

        setBackground(new java.awt.Color(185, 180, 180));

        tblCarDetailsManage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Car Brand", "Car model", "Manufacturing Year", "Max.number of Seats", "Minimum no.ofBachelors", "Car Serial No.", "City", "Car Availability", "Expired_Data"
            }
        ));
        tblCarDetailsManage.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(tblCarDetailsManage);
        tblCarDetailsManage.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        lblManageRides.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblManageRides.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblManageRides.setText("Manage Rides");

        btnDeleteCarDetails.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnDeleteCarDetails.setText("Delete");
        btnDeleteCarDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCarDetailsActionPerformed(evt);
            }
        });

        btnViewCarDetails.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnViewCarDetails.setText("View");
        btnViewCarDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCarDetailsActionPerformed(evt);
            }
        });

        lblSearchfield.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSearchfield.setText("Search By:");

        txtInputFieldManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputFieldManageActionPerformed(evt);
            }
        });

        btnSearchByCarBrand.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSearchByCarBrand.setText("Search by Car Brand");
        btnSearchByCarBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByCarBrandActionPerformed(evt);
            }
        });

        btnListAvailableCars.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnListAvailableCars.setText("List available cars");
        btnListAvailableCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAvailableCarsActionPerformed(evt);
            }
        });

        btnSearchByMfgYr.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSearchByMfgYr.setText("Search by Mfg. Yr.");
        btnSearchByMfgYr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByMfgYrActionPerformed(evt);
            }
        });

        btnSearchBySerialNo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSearchBySerialNo.setText("Search By Serial no.");
        btnSearchBySerialNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchBySerialNoActionPerformed(evt);
            }
        });

        btnSearchByModelNo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSearchByModelNo.setText("Search by model no.");
        btnSearchByModelNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByModelNoActionPerformed(evt);
            }
        });

        btnCarManuList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnCarManuList.setText("Car Manufacturer list");
        btnCarManuList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarManuListActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnFindFirstAvailCar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnFindFirstAvailCar.setText("Find first available car");
        btnFindFirstAvailCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindFirstAvailCarActionPerformed(evt);
            }
        });

        lblSearchByCarSeats.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSearchByCarSeats.setText("Search by car seats:");

        lblEnterMaxSeats.setText("Enter maximum seats:");

        lblEnterMinSeats.setText("Enter minimum seats:");

        btnSearchByCity.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSearchByCity.setText("Search by City");
        btnSearchByCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByCityActionPerformed(evt);
            }
        });

        btnSearchbyExpiryMCerti.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSearchbyExpiryMCerti.setText("Search by Maintenance Cert.");
        btnSearchbyExpiryMCerti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchbyExpiryMCertiActionPerformed(evt);
            }
        });

        btnSeatsMinMax.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSeatsMinMax.setText("Search by Seat requirements");
        btnSeatsMinMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeatsMinMaxActionPerformed(evt);
            }
        });

        btnButtonfunc.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnButtonfunc.setText("BACK");
        btnButtonfunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnButtonfuncActionPerformed(evt);
            }
        });

        btnImportData.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnImportData.setText("Import Data");
        btnImportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportDataActionPerformed(evt);
            }
        });

        btnListExpiredCars.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnListExpiredCars.setText("List Expired Cars");
        btnListExpiredCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListExpiredCarsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSearchByCarSeats)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSeatsMinMax)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtEnterMaxSeats, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblEnterMaxSeats, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblEnterMinSeats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtEnterMinSeats)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSearchfield, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtInputFieldManage, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnViewCarDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteCarDetails)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearchbyExpiryMCerti)
                                .addGap(18, 18, 18)
                                .addComponent(btnImportData)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnFindFirstAvailCar, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnListAvailableCars, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnSearchByCarBrand)
                                            .addComponent(btnSearchByMfgYr))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(55, 55, 55)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnSearchBySerialNo, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(btnSearchByModelNo, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(btnCarManuList, javax.swing.GroupLayout.Alignment.TRAILING)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnSearchByCity))))
                                    .addComponent(btnListExpiredCars))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnButtonfunc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblManageRides, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 67, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCarManuList, btnFindFirstAvailCar, btnListAvailableCars, btnListExpiredCars, btnSearchByCarBrand, btnSearchByCity, btnSearchByMfgYr, btnSearchByModelNo, btnSearchBySerialNo, btnSeatsMinMax});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnImportData, btnViewCarDetails});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblManageRides, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnButtonfunc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnViewCarDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteCarDetails)
                            .addComponent(btnSearchbyExpiryMCerti, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnImportData))
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtInputFieldManage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSearchfield))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEnterMaxSeats)
                            .addComponent(lblEnterMinSeats))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEnterMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEnterMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSearchByCarSeats))
                        .addGap(18, 18, 18)
                        .addComponent(btnSeatsMinMax)
                        .addGap(0, 14, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnFindFirstAvailCar)
                                    .addComponent(btnSearchBySerialNo))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(122, 122, 122)
                                        .addComponent(btnSearchByMfgYr))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(btnListAvailableCars)
                                            .addComponent(btnSearchByModelNo))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(btnSearchByCarBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnCarManuList))
                                        .addGap(18, 18, 18)
                                        .addComponent(btnSearchByCity)))
                                .addGap(18, 18, 18)
                                .addComponent(btnListExpiredCars)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnDeleteCarDetails, btnImportData, btnViewCarDetails, lblSearchByCarSeats, lblSearchfield, txtInputFieldManage});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCarManuList, btnFindFirstAvailCar, btnListAvailableCars, btnListExpiredCars, btnSearchByCarBrand, btnSearchByCity, btnSearchByMfgYr, btnSearchByModelNo, btnSearchBySerialNo, btnSeatsMinMax});

    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchBySerialNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchBySerialNoActionPerformed
        // TODO add your handling code here:
        String resultManage = txtInputFieldManage.getText();
        if (resultManage == null || resultManage.equals("")) 
        {
        JOptionPane.showMessageDialog(null,"Serial number field cannot be empty!", " Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }
         try {
            Integer.parseInt(txtInputFieldManage.getText());
        }
        catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Enter a valid input!", " Warning", JOptionPane.WARNING_MESSAGE);
        }
         {
            ArrayList<Uber> resultManageList = uberInventory.searchSerialNumber(txtInputFieldManage.getText(),uberInventory.getUberList());
            CarRidesTableJPanel panel = new CarRidesTableJPanel(rightJPanel, resultManageList, uberInventory);
            rightJPanel.add("TableJPanel", panel);
            CardLayout layoutManage = (CardLayout) rightJPanel.getLayout();
            layoutManage.next (rightJPanel);
               }
         txtInputFieldManage.setText("");
    }//GEN-LAST:event_btnSearchBySerialNoActionPerformed

    private void btnSearchbyExpiryMCertiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchbyExpiryMCertiActionPerformed
        // TODO add your handling code here:
         String result1Manage = txtInputFieldManage.getText();
        if (result1Manage == null || result1Manage.equals("")) 
        {
        JOptionPane.showMessageDialog(null,"You must choose car expiry status!", " Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }
       {
           ArrayList<Uber> resultManageList = uberInventory.searchMainCerti(txtInputFieldManage.getText(), uberInventory.getUberList());
            CarRidesTableJPanel panelManage = new CarRidesTableJPanel(rightJPanel, resultManageList, uberInventory);
            rightJPanel.add("TableJPanel", panelManage);
            CardLayout layoutManage = (CardLayout) rightJPanel.getLayout();
            layoutManage.next (rightJPanel);
            
            txtInputFieldManage.setText("");
        }
    }//GEN-LAST:event_btnSearchbyExpiryMCertiActionPerformed

    private void btnSearchByCarBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByCarBrandActionPerformed
        // TODO add your handling code here:
        ArrayList<Uber> resultManageList = uberInventory.searchBrand1(txtInputFieldManage.getText(), uberInventory.getUberList());
        if (resultManageList.size() == 0){
            JOptionPane.showMessageDialog(null,"The Brand Name you entered does not exist", " Warning", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
           //ArrayList<Uber> result = uberCatalog.searchBrand(txtField.getText(), uberCatalog.getUberList());
            CarRidesTableJPanel panelManage = new CarRidesTableJPanel(rightJPanel,resultManageList,uberInventory);
            rightJPanel.add("TableJPanel", panelManage);
            CardLayout layout = (CardLayout) rightJPanel.getLayout();
            layout.next (rightJPanel);
        }
        txtInputFieldManage.setText("");        
    }//GEN-LAST:event_btnSearchByCarBrandActionPerformed

    private void btnDeleteCarDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCarDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRowManage = tblCarDetailsManage.getSelectedRow();
        if(selectedRowManage>=0){
            int selectionButtonManage = JOptionPane.YES_NO_OPTION;
            int selectionResultManage = JOptionPane.showConfirmDialog(null, "Confirm to proceed","Warning",selectionButtonManage);
            if(selectionResultManage == JOptionPane.YES_OPTION){
                Uber uberManage = (Uber)tblCarDetailsManage.getValueAt(selectedRowManage, 0);
                uberInventory.deleteUber(uberManage);
                populateTable1( uberInventory.getUberList());
            }
        }else{
            JOptionPane.showMessageDialog(null, "Select a row first!");
        }        
    }//GEN-LAST:event_btnDeleteCarDetailsActionPerformed

    private void btnViewCarDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCarDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRowManage = tblCarDetailsManage.getSelectedRow();
        if(selectedRowManage<0){
            JOptionPane.showMessageDialog(null, "Please select a row from Table", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            Uber uberManage = (Uber) tblCarDetailsManage.getValueAt((selectedRowManage), 0);
            ViewCarRidesJPanel amPanelManage = new ViewCarRidesJPanel (rightJPanel, uberManage);
            rightJPanel.add("ViewJPanel",amPanelManage);
            CardLayout layoutManage = (CardLayout) rightJPanel.getLayout();
            layoutManage.next(rightJPanel);
        }        
    }//GEN-LAST:event_btnViewCarDetailsActionPerformed

    private void btnCarManuListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarManuListActionPerformed
        // TODO add your handling code here:
        CarManufacturersList amPanelManage = new CarManufacturersList (rightJPanel, uberInventory);
        rightJPanel.add("ManuJPanel",amPanelManage);
        CardLayout layout = (CardLayout) rightJPanel.getLayout();
        layout.next(rightJPanel);  
    }//GEN-LAST:event_btnCarManuListActionPerformed

    private void btnFindFirstAvailCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindFirstAvailCarActionPerformed
        // TODO add your handling code here:
            ArrayList<Uber> result = uberInventory.searchFirstAvailUber(txtInputFieldManage.getText(), uberInventory.getUberList());
            CarRidesTableJPanel panel = new CarRidesTableJPanel(rightJPanel, result, uberInventory);
            rightJPanel.add("TableJPanel", panel);
            CardLayout layout = (CardLayout) rightJPanel.getLayout();
            layout.next (rightJPanel);
            
            txtInputFieldManage.setText("");
    }//GEN-LAST:event_btnFindFirstAvailCarActionPerformed

    private void btnSeatsMinMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeatsMinMaxActionPerformed
        // TODO add your handling code here:
        int minSeats = Integer.parseInt(txtEnterMinSeats.getText());
        int maxSeats = Integer.parseInt(txtEnterMaxSeats.getText());
       /* int minseats = minSeatsString.equals("") ? Integer.MIN_VALUE : Integer.parseInt(minSeatsString);
        int maxseats = maxSeatsString.equals("") ? Integer.MAX_VALUE: Integer.parseInt(maxSeatsString);
       */
       ArrayList<Uber> result = uberInventory.searchSeatsAvail(minSeats , maxSeats, uberInventory.getUberList());
       
        CarRidesTableJPanel panelManage = new CarRidesTableJPanel(rightJPanel, result, uberInventory);
        rightJPanel.add("TableJPanel", panelManage);
        CardLayout layout = (CardLayout) rightJPanel.getLayout();
        layout.next (rightJPanel);
        
        txtEnterMaxSeats.setText("");
        txtEnterMinSeats.setText("");
    }//GEN-LAST:event_btnSeatsMinMaxActionPerformed

    private void btnListAvailableCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAvailableCarsActionPerformed
        // TODO add your handling code here:
        String resultManage = txtInputFieldManage.getText();
        if (resultManage == null || resultManage.equals("")) 
        {
        JOptionPane.showMessageDialog(null,"Please enter the Availability status", " Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }
         
         {
            ArrayList<Uber> resultManageL = uberInventory.searchAvailStatus(txtInputFieldManage.getText(), uberInventory.getUberList());
            CarRidesTableJPanel panel = new CarRidesTableJPanel(rightJPanel, resultManageL, uberInventory);
            rightJPanel.add("TableJPanel", panel);
            CardLayout layout = (CardLayout) rightJPanel.getLayout();
            layout.next (rightJPanel);
        
        
       
       // ArrayList<Uber> resulttt = uberCatalog.searchManuYear(txtField.getText());
               }
         txtInputFieldManage.setText("");        
    }//GEN-LAST:event_btnListAvailableCarsActionPerformed

    private void btnSearchByCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByCityActionPerformed
        // TODO add your handling code here:
        ArrayList<Uber> result = uberInventory.searchAvailCity(txtInputFieldManage.getText(), uberInventory.getUberList());
        if (result.size() == 0){
            JOptionPane.showMessageDialog(null,"The Available City Name you entered does not exist", " Warning", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
           // ArrayList<Uber> result = uberCatalog.searchAvailCity(txtField.getText());
            CarRidesTableJPanel panelList = new CarRidesTableJPanel(rightJPanel,result,uberInventory);
            rightJPanel.add("TableJPanel", panelList);
            CardLayout layout = (CardLayout) rightJPanel.getLayout();
            layout.next (rightJPanel);
            
            txtInputFieldManage.setText("");
        }        
    }//GEN-LAST:event_btnSearchByCityActionPerformed

    private void btnSearchByModelNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByModelNoActionPerformed
        // TODO add your handling code here:
        ArrayList<Uber> result = uberInventory.searchModelNumber(txtInputFieldManage.getText(),uberInventory.getUberList());
        if (result.size() == 0)
        {
            JOptionPane.showMessageDialog(null,"The Model Number you entered does not exist", " Warning", JOptionPane.WARNING_MESSAGE);
        }
        else 
        {
            //ArrayList<Uber> result = uberCatalog.searchModelNumber();
            CarRidesTableJPanel panel = new CarRidesTableJPanel(rightJPanel,result,uberInventory);
            rightJPanel.add("TableJPanel", panel);
            CardLayout layout = (CardLayout) rightJPanel.getLayout();
            layout.next (rightJPanel);
        }
    }//GEN-LAST:event_btnSearchByModelNoActionPerformed

    private void btnSearchByMfgYrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByMfgYrActionPerformed
        // TODO add your handling code here:
        String resultt = txtInputFieldManage.getText();
        if (resultt == null || resultt.equals("")) 
        {
        JOptionPane.showMessageDialog(null,"Please enter the manufacturing year", " Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }
         try {
            Integer.parseInt(txtInputFieldManage.getText());
        }
        catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Please give a valid input", " Warning", JOptionPane.WARNING_MESSAGE);
        }
         {
            ArrayList<Uber> result = uberInventory.searchManuYear(txtInputFieldManage.getText(), uberInventory.getUberList());
            CarRidesTableJPanel panel = new CarRidesTableJPanel(rightJPanel, result, uberInventory);
            rightJPanel.add("TableJPanel", panel);
            CardLayout layout = (CardLayout) rightJPanel.getLayout();
            layout.next (rightJPanel);
               }
         txtInputFieldManage.setText("");
    }//GEN-LAST:event_btnSearchByMfgYrActionPerformed

    private void btnButtonfuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnButtonfuncActionPerformed
        // TODO add your handling code here:
        rightJPanel.remove(this);
        CardLayout layout = (CardLayout) rightJPanel.getLayout();
        layout.previous(rightJPanel);
    }//GEN-LAST:event_btnButtonfuncActionPerformed

    private void btnImportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportDataActionPerformed
        // TODO add your handling code here:
    populateTable(uberInventory, "all");
    }//GEN-LAST:event_btnImportDataActionPerformed

    private void txtInputFieldManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputFieldManageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInputFieldManageActionPerformed

    private void btnListExpiredCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListExpiredCarsActionPerformed
        // TODO add your handling code here:
       String resultManage = txtInputFieldManage.getText();
        if (resultManage == null || resultManage.equals("")) 
        {
        JOptionPane.showMessageDialog(null,"Please enter the Expiry status", " Warning", JOptionPane.WARNING_MESSAGE);
        return;
        }
         
         {
            ArrayList<Uber> result = uberInventory.searchExpiryStatus(txtInputFieldManage.getText(), uberInventory.getUberList());
            CarRidesTableJPanel panel = new CarRidesTableJPanel(rightJPanel, result, uberInventory);
            rightJPanel.add("TableJPanel", panel);
            CardLayout layout = (CardLayout) rightJPanel.getLayout();
            layout.next (rightJPanel);
               }
         txtInputFieldManage.setText(""); 
    }//GEN-LAST:event_btnListExpiredCarsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnButtonfunc;
    private javax.swing.JButton btnCarManuList;
    private javax.swing.JButton btnDeleteCarDetails;
    private javax.swing.JButton btnFindFirstAvailCar;
    private javax.swing.JButton btnImportData;
    private javax.swing.JButton btnListAvailableCars;
    private javax.swing.JButton btnListExpiredCars;
    private javax.swing.JButton btnSearchByCarBrand;
    private javax.swing.JButton btnSearchByCity;
    private javax.swing.JButton btnSearchByMfgYr;
    private javax.swing.JButton btnSearchByModelNo;
    private javax.swing.JButton btnSearchBySerialNo;
    private javax.swing.JButton btnSearchbyExpiryMCerti;
    private javax.swing.JButton btnSeatsMinMax;
    private javax.swing.JButton btnViewCarDetails;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblEnterMaxSeats;
    private javax.swing.JLabel lblEnterMinSeats;
    private javax.swing.JLabel lblManageRides;
    private javax.swing.JLabel lblSearchByCarSeats;
    private javax.swing.JLabel lblSearchfield;
    private javax.swing.JTable tblCarDetailsManage;
    private javax.swing.JTextField txtEnterMaxSeats;
    private javax.swing.JTextField txtEnterMinSeats;
    private javax.swing.JTextField txtInputFieldManage;
    // End of variables declaration//GEN-END:variables
   
    void populateTable(UberInventory uberList, String all) {
         //To change body of generated methods, choose Tools | Templates.
         DefaultTableModel dtm = (DefaultTableModel) tblCarDetailsManage.getModel();
            dtm.setRowCount(0);
            for (Uber uber : uberInventory.getUberList())
            {
                if(uber.getCarBrand().equals(all)|| all.equals("all")){
                Object[] row = new Object [9];
                row [0] = uber;
                row [1] = uber.getCarModelNo();
                row [2] = uber.getCarManuYear();
                row [3] = uber.getCarMaxSeats();
                row [4] = uber.getCarMinSeats();
                row [5] = uber.getCarSerialNo();
                row [6] = uber.getCity();
                row [7] = uber.isCarAvailability();
                row [8] = uber.isCarExpiry();
                
                dtm.addRow(row);
                
            }
    }

    
    }
    
    private void populateTable1(ArrayList<Uber> uberList) {
         //To change body of generated methods, choose Tools | Templates.
         DefaultTableModel dtm = (DefaultTableModel) tblCarDetailsManage.getModel();
            dtm.setRowCount(0);
            for (Uber uber : uberInventory.getUberList())
            {
                
                Object[] row = new Object [9];
                row [0] = uber;
                row [1] = uber.getCarModelNo();
                row [2] = uber.getCarManuYear();
                row [3] = uber.getCarMaxSeats();
                row [4] = uber.getCarMinSeats();
                row [5] = uber.getCarSerialNo();
                row [6] = uber.getCity();
                row [7] = uber.isCarAvailability();
                row [8] = uber.isCarExpiry();
                
                dtm.addRow(row);
                
            }
    }
}
