/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import Logic.VitalSignsPatient;
import java.text.SimpleDateFormat;
import Logic.VitalSignPatient;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class ViewHistory extends javax.swing.JPanel {

    /**
     * Creates new form ViewHistory
     */
    int onSpecificRow;
    VitalSignsPatient vitalSignsHistory;
    
    public ViewHistory(VitalSignsPatient vitalSignsHistory) {
        initComponents();
        this.onSpecificRow = 0;
        this.vitalSignsHistory = vitalSignsHistory;
        populateVitalSignsTable();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVitalSigns = new javax.swing.JTable();

        setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Patient History Details");

        tblVitalSigns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Med Record No", "Age", "City", "Community", "BP Min", "BP Max", "Encounter Date"
            }
        ));
        jScrollPane1.setViewportView(tblVitalSigns);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(366, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblVitalSigns;
    // End of variables declaration//GEN-END:variables

    private void populateVitalSignsTable() {
        DefaultTableModel model = (DefaultTableModel) tblVitalSigns.getModel();
        model.setRowCount(0);
            
        for(VitalSignPatient p: vitalSignsHistory.getVitalSignsHistory()) {
            Object[] row = new Object[8];
            row[0] = p.getNamePerson();
            row[1] = p.getMedRecNoPerson();
            row[2] = p.getAgePerson();
            row[3] = p.getCityPerson();
            row[4] = p.getCommPerson();
            row[5] = p.getBloodPressureLow();
            row[6] = p.getBloodPressureUpp();
            SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
            dateFormat.setLenient(false);
            row[7] = dateFormat.format(p.getReportedDatePerson());
            model.addRow(row);
        }          
    }
}
