/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.util.List;
import Logic.PatientDirectory;
import Logic.PatientExtendsPerson;
import Logic.VitalSignsPatient;
import Logic.VitalSignPatient;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.stream.Collectors;

/**
 *
 * @author Dell
 */
public class ManagePatientsPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatientsPanel
     */
    PatientDirectory patients;
    VitalSignsPatient vitalSignsHistory;
    int onSpecificRow;
    
    public ManagePatientsPanel(PatientDirectory patients, VitalSignsPatient vitalSignsHistory) {
        initComponents();
        this.patients = patients;
        this.vitalSignsHistory = vitalSignsHistory;        
        onSpecificRow = 0; 

        populatePatientTable(new ArrayList<>(patients.getPatients()));        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtName = new javax.swing.JTextField();
        lblMinimum = new javax.swing.JLabel();
        lblMedicalRecordNo = new javax.swing.JLabel();
        lblMaximum = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        txtBpMin = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        lblBloodPressure = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblFilterCommunity = new javax.swing.JLabel();
        txtFilterCommunity = new javax.swing.JTextField();
        lblCreate = new javax.swing.JLabel();
        comboAge = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDisplayPatient = new javax.swing.JTable();
        lblFilterAge = new javax.swing.JLabel();
        btnApply = new javax.swing.JButton();
        txtMedicalRecordNo = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        txtCity = new javax.swing.JTextField();
        lblNoOfPeople = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblPeople = new javax.swing.JLabel();
        txtCommunity = new javax.swing.JTextField();
        lblCommunity = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtBpMax = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(204, 204, 255));
        setMinimumSize(new java.awt.Dimension(719, 590));
        setPreferredSize(new java.awt.Dimension(719, 590));

        txtName.setAutoscrolls(false);
        txtName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txtName.setEnabled(false);

        lblMinimum.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMinimum.setForeground(new java.awt.Color(153, 153, 153));
        lblMinimum.setText("Minimum");

        lblMedicalRecordNo.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblMedicalRecordNo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMedicalRecordNo.setText("Medical Record No:");

        lblMaximum.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMaximum.setForeground(new java.awt.Color(153, 153, 153));
        lblMaximum.setText("Maximum");

        lblAge.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblAge.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAge.setText("Age:");

        txtBpMin.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txtBpMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBpMinActionPerformed(evt);
            }
        });

        txtAge.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblBloodPressure.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblBloodPressure.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblBloodPressure.setText("Blood Presure:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("To find the people in the community with specific age having abnormal Blood Pressure:");

        lblFilterCommunity.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblFilterCommunity.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFilterCommunity.setText("Community:");

        txtFilterCommunity.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txtFilterCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterCommunityActionPerformed(evt);
            }
        });

        lblCreate.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblCreate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCreate.setText("Display Patient");

        comboAge.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comboAge.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Below 18", "18 to 45", "Above 45", " " }));
        comboAge.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblDisplayPatient.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblDisplayPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Med Record No", "Age", "City", "Community", "BP Minimum", "BP Maximum"
            }
        ));
        tblDisplayPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDisplayPatientMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDisplayPatient);

        lblFilterAge.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblFilterAge.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFilterAge.setText("Age:");

        btnApply.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnApply.setText("Apply");
        btnApply.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        txtMedicalRecordNo.setAutoscrolls(false);
        txtMedicalRecordNo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txtMedicalRecordNo.setEnabled(false);
        txtMedicalRecordNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMedicalRecordNoFocusLost(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtCity.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });

        lblNoOfPeople.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblNoOfPeople.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNoOfPeople.setText("No of People:");

        lblCity.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblCity.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCity.setText("City:");

        lblPeople.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPeople.setForeground(new java.awt.Color(204, 0, 0));
        lblPeople.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtCommunity.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txtCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCommunityActionPerformed(evt);
            }
        });

        lblCommunity.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblCommunity.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCommunity.setText("Community:");

        lblName.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblName.setText("Name:");

        txtBpMax.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        txtBpMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBpMaxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(292, 292, 292)
                        .addComponent(lblCreate)
                        .addGap(127, 127, 127)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 28, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(189, 189, 189)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(lblName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAge)
                                    .addComponent(lblMedicalRecordNo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMedicalRecordNo, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblBloodPressure)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtBpMax, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtBpMin, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(lblCommunity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCommunity))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(lblCity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCity)))
                        .addGap(296, 296, 296))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(lblMaximum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblMinimum, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFilterCommunity)
                                    .addComponent(lblFilterAge, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFilterCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNoOfPeople)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPeople, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMedicalRecordNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMedicalRecordNo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAge, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCity))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCommunity))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBpMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBpMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBloodPressure))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaximum)
                    .addComponent(lblMinimum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFilterCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFilterCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFilterAge))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNoOfPeople)
                    .addComponent(lblPeople, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnApply)
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtBpMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBpMinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBpMinActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        String namePerson = txtName.getText();
        if(namePerson == null || namePerson.equals(""))
            {
                JOptionPane.showMessageDialog(null,"Please enter a Name!");
                return;
            }
        
        String agePerson = txtAge.getText();
        if(agePerson == null || agePerson.equals(""))
            {
                JOptionPane.showMessageDialog(null,"Age field cannot be empty!");
                return;
            }
         try {
            Integer.parseInt(txtAge.getText());
        }
        catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Only digits accepted in age field!", " Warning", JOptionPane.WARNING_MESSAGE);
            return;
            
        } 
        
        String cityPerson = txtCity.getText();
        if(cityPerson == null || cityPerson.equals(""))
            {
                JOptionPane.showMessageDialog(null,"Please enter your city!");
                return;
            }   
 
        String commPerson = txtCommunity.getText();
        if(commPerson == null || commPerson.equals(""))
            {
                JOptionPane.showMessageDialog(null,"Please enter your community!");
                return;
            }          

        String medRecPerson = txtMedicalRecordNo.getText();
        if(medRecPerson == null || medRecPerson.equals(""))
            {
                JOptionPane.showMessageDialog(null,"Please enter your medical record number!");
                return;
            } 
         try {
            Integer.parseInt(txtMedicalRecordNo.getText());
        }
        catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Only digits accepted in Medical record field!", " Warning", JOptionPane.WARNING_MESSAGE);
            return;
            
        }   
        int personMedicalRecordNo = Integer.parseInt(txtMedicalRecordNo.getText());
        int personAge = Integer.parseInt(txtAge.getText());
        double personBloodPressurelow = Double.parseDouble(txtBpMin.getText());
        double personBloodPressureUpp = Double.parseDouble(txtBpMax.getText());
        String personCity = txtCity.getText();
        String personCommunity = txtCommunity.getText();
        String namePer = txtName.getText();
        
        VitalSignPatient newVitals = vitalSignsHistory.addNewVitalSigns();        
        
        PatientExtendsPerson patient = null;
        for(PatientExtendsPerson p: patients.getPatients()) {
            if (p.getPersonMedRecNo()== personMedicalRecordNo) {
                patient = p;
            }
        }
        if(patient == null){
            JOptionPane.showMessageDialog(this, "Error in saving Blood Pressure!");
        } else {
            patient.setPersonAge(personAge);
            patient.setPersonCity(personCity);
            patient.setPersonCommunity(personCommunity);
            patient.setBloodPressurelow(personBloodPressurelow);
            patient.setBloodPressureUpp(personBloodPressureUpp);
            
                    Date encounter = new Date();

                    newVitals.setNamePerson(namePer);
                    newVitals.setMedRecNoPerson(personMedicalRecordNo);
                    newVitals.setAgePerson(personAge);
                    newVitals.setCommPerson(personCommunity);
                    newVitals.setCityPerson(personCity);
                    newVitals.setBloodPressureLow(personBloodPressurelow);
                    newVitals.setBloodPressureUpp(personBloodPressureUpp);
                    newVitals.setReportedDatePerson(encounter);
        }

        // DefaultTableModel model = (DefaultTableModel)tblDisplayPatient.getModel();
        //Patient currentSelectedpatient = patients.getPatients());
        populatePatientTable(patients.getPatients());
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtFilterCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterCommunityActionPerformed

    private void tblDisplayPatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDisplayPatientMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblDisplayPatient.getModel();
        onSpecificRow = tblDisplayPatient.getSelectedRow();

        String personName = model.getValueAt(tblDisplayPatient.getSelectedRow(), 0).toString();
        String personMedRecordNo = model.getValueAt(tblDisplayPatient.getSelectedRow(), 1).toString();
        String personAge = model.getValueAt(tblDisplayPatient.getSelectedRow(), 2).toString();
        String personCity = model.getValueAt(tblDisplayPatient.getSelectedRow(), 3).toString();
        String personCommunity = model.getValueAt(tblDisplayPatient.getSelectedRow(), 4).toString();
        String personBloodPressurelow = model.getValueAt(tblDisplayPatient.getSelectedRow(), 5).toString();
        String personBloodPressureHigh = model.getValueAt(tblDisplayPatient.getSelectedRow(), 6).toString();

        txtName.setText(personName);
        txtMedicalRecordNo.setText(personMedRecordNo);
        txtAge.setText(personAge);
        txtCity.setText(personCity);
        txtCommunity.setText(personCommunity);
        txtBpMin.setText(personBloodPressurelow);
        txtBpMax.setText(personBloodPressureHigh);
        }

        private void populatePatientTable(List<PatientExtendsPerson> patients) {
            DefaultTableModel model = (DefaultTableModel) tblDisplayPatient.getModel();
            model.setRowCount(0);

            for(PatientExtendsPerson p: patients) {
                Object[] row = new Object[7];
                row[0] = p;
                row[1] = p.getPersonMedRecNo();
                row[2] = p.getPersonAge();
                row[3] = p.getPersonCity();
                row[4] = p.getPersonCommunity();
                row[5] = p.getBloodPressurelow();
                row[6] = p.getBloodPressureUpp();

                model.addRow(row);
            }
    }//GEN-LAST:event_tblDisplayPatientMouseClicked

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        // TODO add your handling code here:
        List<PatientExtendsPerson> patients = this.patients.getPatients().stream()
        .filter(p ->
            p.getPersonCommunity().equals(txtFilterCommunity.getText())
            && !p.isPatientNormal(p.getPersonAge(), p.getBloodPressurelow(), p.getBloodPressureUpp())
            && isWithinRange(comboAge.getSelectedItem().toString(), p.getPersonAge())
        )
        .collect(Collectors.toList());
        populatePatientTable(patients);
        int current = tblDisplayPatient.getRowCount();
        lblPeople.setText(String.valueOf(current));
    }//GEN-LAST:event_btnApplyActionPerformed

    private void txtMedicalRecordNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMedicalRecordNoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMedicalRecordNoFocusLost

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblDisplayPatient.getModel();
        String medicalRecordNo = model.getValueAt(tblDisplayPatient.getSelectedRow(), 1).toString();
        PatientExtendsPerson deletePatient = null;
        // int medicalRecordNo = Integer.parseInt(txtMedicalRecordNo.getText());
        for(PatientExtendsPerson p: patients.getPatients()) {
            if (String.valueOf(p.getPersonMedRecNo()).equals(medicalRecordNo)) {
                deletePatient = p;
            }
        }
        if(deletePatient != null){
            patients.deletePatient(deletePatient);
        }
        populatePatientTable(patients.getPatients());

        txtName.setText("");
        txtMedicalRecordNo.setText("");
        txtAge.setText("");
        txtCommunity.setText("");
        txtCity.setText("");
        txtBpMin.setText("");
        txtBpMax.setText("");
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityActionPerformed

    private void txtCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCommunityActionPerformed

    private void txtBpMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBpMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBpMaxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboAge;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblCreate;
    private javax.swing.JLabel lblFilterAge;
    private javax.swing.JLabel lblFilterCommunity;
    private javax.swing.JLabel lblMaximum;
    private javax.swing.JLabel lblMedicalRecordNo;
    private javax.swing.JLabel lblMinimum;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNoOfPeople;
    private javax.swing.JLabel lblPeople;
    private javax.swing.JTable tblDisplayPatient;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtBpMax;
    private javax.swing.JTextField txtBpMin;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtFilterCommunity;
    private javax.swing.JTextField txtMedicalRecordNo;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private boolean isWithinRange(String range, int age) {
        if (range.equals("Below 18") && age < 18) {
            return true;
        } else if (range.equals("18 to 45") && age >= 18 && age <=45) {
            return true;
        } else if (range.equals("Above 45") && age > 45) {
            return true;
        } else {
            return false;
        }
    }
}
